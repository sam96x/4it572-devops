name: build and tests our eshop workflow

on:
  workflow_dispatch:
  push:

jobs:
  # Install:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Code checkout
  #       uses: actions/checkout@v2.5.0
  #       with:
  #         token: ${{ secrets.WORKLOW_TOKEN }}

  #     - name: Setup NodeJS
  #       uses: actions/setup-node@v3.5.1
  #       with:
  #         node-version: 10

  #     - name: Cache
  #       uses: actions/cache@v3.0.11
  #       with:
  #         path: node_modules
  #         key: node_modules-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: node_modules-

  #     - name: Install packages with NPM
  #       run: |
  #         npm ci
  # Build:
  #   needs: Install
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Code checkout
  #       uses: actions/checkout@v2.5.0
  #       with:
  #         token: ${{ secrets.WORKLOW_TOKEN }}

  #     - name: Setup NodeJS
  #       uses: actions/setup-node@v3.5.1
  #       with:
  #         node-version: 10

  #     - name: Cache
  #       uses: actions/cache@v3.0.11
  #       with:
  #         path: node_modules
  #         key: node_modules-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: node_modules-

  #     - name: Install packages (with NPM)
  #       run: |
  #         npm ci

  #     - name: Build
  #       run: |
  #         npm rebuild node-sass --force
  #         npm run build -- --colors

  #     - name: Cache node modules and build folder
  #       if: ${{ github.ref == 'refs/heads/master' }}
  #       uses: actions/cache@v3.0.11
  #       with:
  #         path: |
  #           ~/.npm
  #           ./node_modules
  #           ./build
  #         key: ${{ runner.os }}-build-${{ github.run_id }}
  #         restore-keys: ${{ runner.os }}-build-${{ github.run_id }}
  # Test:
  #   needs: Install
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Code checkout
  #       uses: actions/checkout@v2.5.0
  #       with:
  #         token: ${{ secrets.WORKLOW_TOKEN }}

  #     - name: Setup NodeJS
  #       uses: actions/setup-node@v3.5.1
  #       with:
  #         node-version: 10

  #     - name: Cache
  #       uses: actions/cache@v3.0.11
  #       with:
  #         path: node_modules
  #         key: node_modules-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: node_modules-

  #     - name: Install packages with NPM
  #       run: |
  #         npm ci

  #     - name: Run tests
  #       run: |
  #         npm run test -- --colors

  Deploy:
    name: Deploy app to EC2 with Ansible playbook
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Create a pem file and SSH connection
        uses: D3rHase/ssh-command-action@v0.2.2
        with:
          host: ec2-44-201-115-224.compute-1.amazonaws.com # Remote server address / ip - required
          port: 22 # Remote server port -  Default: 22 - optional
          user: ec2-user # Remote server user - required
          private_key: ${{secrets.PEM_KEY}} # Private ssh key registered on the remote server - required
        # run: |
        #   mkdir .ssh && chmod 700 .ssh && cd .ssh
        #   touch secret.pem && chmod 600 secret.pem
        #   echo "${{ secrets.PEM_KEY }}" >> secret.pem
        #   ssh -T -o StrictHostKeyChecking=no -i secret.pem ec2-user@ec2-44-201-115-224.compute-1.amazonaws.com 
      # - name: Code checkout
      #   uses: actions/checkout@v2.5.0
      #   with:
      #     token: ${{ secrets.WORKLOW_TOKEN }}
      # - name: Run ansible playbook
      #   run: |
      #     cd ansible
      #     ansible-playbook ec2_deploy.yml
        # uses: dawidd6/action-ansible-playbook@v2
        # with:
        #   playbook: ec2_deploy.yml
        #   directory: ./ansible
        #   key: ${{secrets.PEM_KEY}}

         